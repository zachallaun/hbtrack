#!/usr/bin/env python

import httplib
import base64
import json
import re
import os
import sys
import webbrowser

from urlparse import urlparse
from optparse import OptionParser

class Config(object):
    required_attrs = {'gh_username': 'GitHub username',
                      'gh_token': 'GitHub personal access token',
                      'hb_email': 'Humbug email',
                      'hb_api_key': 'Humbug api key'}

    def __init__(self):
        self.path = os.path.expanduser('~/.hbtrack')
        self.data = self._read()

    def missing_attrs(self):
        return dict([(key, val) for key, val in Config.required_attrs.items()
                                if key not in self.data.keys()])

    def destroy(self):
        self.data = {}
        self._write()

    def _read(self):
        try:
            with open(self.path) as f:
                return json.loads(f.read())
        except IOError:
            return {}

    def _write(self):
        with open(self.path, 'w+') as f:
            f.write(json.dumps(self.data))

    def __getitem__(self, key):
        return self.data[key]

    def __setitem__(self, key, value):
        self.data[key] = value
        self._write()

    def __delitem__(self, key):
        del self.data[key]
        self._write()

    def __repr__(self):
        return repr(self.data)

def request(method, url, options=None):
    options = options or {}

    url = urlparse(url)
    host = url.netloc
    path = url.path

    if options.get('ssl'):
        conn = httplib.HTTPSConnection(host)
    else:
        conn = httplib.HTTPConnection(host)

    body = options.get('body', options.get('params', ''))
    headers = options.get('headers', {})

    conn.request(method, path, body, headers)
    return conn.getresponse()

def authenticated_post(url, username, token, params=None):
    params = params or {}

    encoded_userpass = base64.b64encode('{0}:{1}'.format(token, ''))
    auth_string = 'Basic {0}'.format(encoded_userpass)

    options = {'params': params,
               'ssl': True,
               'headers': {'Authorization': auth_string,
                           'Content-type': 'application/x-www-form-urlencoded',
                           'User-Agent': 'hbtrack'}}

    return request('POST', url, options)

def add_service_hook(hook, username, token, repo, **config):
    url = 'https://api.github.com/repos/{0}/{1}/hooks'.format(username, repo)

    params = {'name': hook,
              'active': True,
              'config': config}

    return authenticated_post(url, username, token, json.dumps(params))

def verify_config(config):
    for key, name in config.missing_attrs().items():
        if key == 'gh_token':
            webbrowser.open_new_tab('https://github.com/settings/tokens/new')
        config[key] = raw_input("{0}: ".format(name))
    return config

def cli():
    desc = "Track your GitHub repositories on Humbug"
    usage = "usage: %prog repo [repo ...]"
    parser = OptionParser(description=desc, usage=usage)

    _, args = parser.parse_args()
    config = verify_config(Config())

    for repo in args:
        if not re.match(r'[a-zA-Z0-9-_.]+$', repo):
            print 'not a valid github repo name'
            continue
        resp = add_service_hook('humbug',
                                config['gh_username'],
                                config['gh_token'],
                                repo,
                                email=config['hb_email'],
                                api_key=config['hb_api_key'])
        resp_body = resp.read()
        repo_name =  "{0}/{1}".format(config['gh_username'], repo)
        if resp.status == 201:
            print "{} is being tracked".format(repo_name)
        else:
            try:
                resp_params = json.loads(resp_body)
            except ValueError:
                print 'no json recieved, got this instead:\n{}\n'.format(resp_body)
            else:
                if 'url' in resp_params:
                    print "looks like {} is already being tracked".format(repo_name)
                elif resp_params.get('message', 'nope') == 'Not Found':
                    print "looks like {} doesn't exist on github".format(repo_name)
                else:
                    sys.stderr.write('Something broke. Bad credentials? GitHub response:\n{}\n'.format(resp_body))
                    sys.stderr.flush()
                    if 'y' in raw_input('Remove stored authentication?').lower():
                        config.destroy()
                    sys.exit(1)

if __name__ == '__main__':
    cli()
